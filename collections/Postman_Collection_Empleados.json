{
	"info": {
		"_postman_id": "empleados-api-pruebas-integracion",
		"name": "Empleados API - Pruebas de Integración (Actualizado)",
		"description": "Colección para probar todos los endpoints de la API de Empleados",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0. Login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"usuario\": \"admin\",\n  \"contrasena\": \"admin123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Guarda el token JWT en una variable de entorno",
							"var jsonData = pm.response.json();",
							"if(jsonData.token){ pm.environment.set(\"jwtToken\", jsonData.token); }"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "1. Obtener Todos los Empleados",
			"request": {
				"method": "POST",
				"header": [],
				"auth": {
					"type": "bearer",
					"bearer": [
						{ "key": "token", "value": "{{jwtToken}}", "type": "string" }
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/empleados/ObtenerEmpleados",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"empleados",
						"ObtenerEmpleados"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verificar que el status code sea 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test 2: Verificar que la respuesta sea un array",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"// Test 3: Verificar que hay al menos un empleado",
							"pm.test(\"At least one employee exists\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);",
							"});",
							"",
							"// Test 4: Verificar estructura de datos",
							"pm.test(\"Employee has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.length > 0) {",
							"        var firstEmployee = jsonData[0];",
							"        pm.expect(firstEmployee).to.have.property('idEmpleado');",
							"        pm.expect(firstEmployee).to.have.property('codigoEmpleado');",
							"        pm.expect(firstEmployee).to.have.property('nombre');",
							"        pm.expect(firstEmployee).to.have.property('apellidoPaterno');",
							"    }",
							"});",
							"",
							"// Test 5: Verificar tiempo de respuesta",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "2. Obtener Empleado por ID",
			"request": {
				"method": "POST",
				"header": [],
				"auth": {
					"type": "bearer",
					"bearer": [
						{ "key": "token", "value": "{{jwtToken}}", "type": "string" }
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/empleados/ObtenerEmpleadoPorId/{{empleadoId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"empleados",
						"ObtenerEmpleadoPorId",
						"{{empleadoId}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verificar que el status code sea 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test 2: Verificar que la respuesta sea un objeto",
							"pm.test(\"Response is an object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object');",
							"});",
							"",
							"// Test 3: Verificar que el ID coincida",
							"pm.test(\"Employee ID matches\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.idEmpleado).to.eql({{empleadoId}});",
							"});",
							"",
							"// Test 4: Verificar campos requeridos",
							"pm.test(\"Employee has all required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('idEmpleado');",
							"    pm.expect(jsonData).to.have.property('codigoEmpleado');",
							"    pm.expect(jsonData).to.have.property('nombre');",
							"    pm.expect(jsonData).to.have.property('apellidoPaterno');",
							"    pm.expect(jsonData).to.have.property('fechaNacimiento');",
							"    pm.expect(jsonData).to.have.property('fechaInicioContrato');",
							"    pm.expect(jsonData).to.have.property('puesto');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "3. Crear Nuevo Empleado",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"auth": {
					"type": "bearer",
					"bearer": [
						{ "key": "token", "value": "{{jwtToken}}", "type": "string" }
					]
				},
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Juan\",\n    \"apellido\": \"Pérez\",\n    \"correo\": \"juan.perez@correo.com\",\n    \"idPuesto\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/empleados/CrearEmpleado",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"empleados",
						"CrearEmpleado"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verificar que el status code sea 201",
							"pm.test(\"Status code is 201 for created employee\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test 2: Verificar que la respuesta contenga el ID del nuevo empleado",
							"pm.test(\"Response contains new employee ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('idEmpleado');",
							"    pm.expect(jsonData.idEmpleado).to.be.a('number');",
							"    pm.expect(jsonData.idEmpleado).to.be.greaterThan(0);",
							"});",
							"",
							"// Test 3: Guardar el ID del nuevo empleado para usar en otras pruebas",
							"if (pm.response.code === 201) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"newEmployeeId\", jsonData.idEmpleado);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "4. Actualizar Empleado",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"auth": {
					"type": "bearer",
					"bearer": [
						{ "key": "token", "value": "{{jwtToken}}", "type": "string" }
					]
				},
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Juan Actualizado\",\n    \"apellido\": \"Pérez\",\n    \"correo\": \"juan.perez@correo.com\",\n    \"idPuesto\": 1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/empleados/ActualizarEmpleado/{{empleadoId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"empleados",
						"ActualizarEmpleado",
						"{{empleadoId}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verificar que el status code sea 200",
							"pm.test(\"Status code is 200 for updated employee\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test 2: Verificar que la respuesta indique éxito",
							"pm.test(\"Update was successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "5. Eliminar Empleado",
			"request": {
				"method": "POST",
				"header": [],
				"auth": {
					"type": "bearer",
					"bearer": [
						{ "key": "token", "value": "{{jwtToken}}", "type": "string" }
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/empleados/EliminarEmpleado/{{empleadoId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"empleados",
						"EliminarEmpleado",
						"{{empleadoId}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Verificar que el status code sea 200",
							"pm.test(\"Status code is 200 for deleted employee\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test 2: Verificar que la eliminación fue exitosa",
							"pm.test(\"Delete was successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
} 